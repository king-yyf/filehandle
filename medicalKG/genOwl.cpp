//
//  main.cpp
//  txt2owl
//
//  Created by Yang Yunfei on 2018/7/16.
//  Copyright © 2018年 Yang Yunfei. All rights reserved.
//

#include <iostream>
#include <set>
#include <cstring>
#include <string>
#include <map>

using namespace std;

string url = "http://www.semanticweb.org/yangyf/ontologies/Medical#";
string url_prefix = "    <!-- ";
string arrow = " -->\n";
string suffix = "\"/>\n";
string class_suffix = "    </owl:Class>\n\n";
string class_prefix = "    <owl:Class rdf:about=\"";
string subclass_prefix = "        <rdfs:subClassOf rdf:resource=\"";
string file_suffix = "</rdf:RDF>\n\n<!-- Generated by the OWL API (version 4.2.8.20170104-2310) https://github.com/owlcs/owlapi -->";
string superclass = "疾病";
string superclass1 = "药物";

string object_prefix = "    <owl:NamedIndividual rdf:about=\"";
string object_prefix1 = "        <rdf:type rdf:resource=\"";
string object_suffix = "    </owl:NamedIndividual>\n\n";

string get_fa(string key, map<string, string> actMap)
{
    int len = (int)key.length();
    string res;
    switch (len) {
        case 1:
            res = superclass1;
            break;
        case 3:
            if(actMap.count(key.substr(0,1)) > 0)
                res = actMap[key.substr(0,1)];
            else
                res = superclass1;
            break;
        case 4:
            if(actMap.count(key.substr(0,3)) > 0)
                res = actMap[key.substr(0,3)];
            else
                res = get_fa(key.substr(0,3), actMap);
            break;
        case 5:
            if(actMap.count(key.substr(0,4)) > 0)
                res = actMap[key.substr(0,4)];
            else
                res = get_fa(key.substr(0,4), actMap);
            break;
        case 7:
            if(actMap.count(key.substr(0,5)) > 0)
                res = actMap[key.substr(0,5)];
            else
                res = get_fa(key.substr(0,5), actMap);
            break;
        default:
            res = "error";
            break;
    }
    return res;
}

int main(int argc, const char * argv[]) {
    // insert code here...
    FILE * f1 = fopen("/Users/yangyf/Desktop/file1.txt", "r");
    FILE * f2 = fopen("/Users/yangyf/Desktop/file2.txt", "r");
    FILE * f3 = fopen("/Users/yangyf/Desktop/medical.owl", "a");
    FILE * f4 = fopen("/Users/yangyf/Desktop/yaozhi.txt", "r");
    
    string type_name; //类型名称
    char type_ch[200];   //第一级
    char code1[30], class_2[200]; //第二级
    char code2[30], class_3[200]; //第三级
    string min_code, max_code, tmp, subcode;
    
    int sub_num; //子类数目
    //    bool flag = true;
    
    for(int i = 0; i < 22; ++i)
    {
        //        bool first = true;
        printf("i = : %d\n", i);
        fscanf(f1, "%s %d", type_ch, &sub_num);
        type_name = type_ch;
        tmp = url_prefix + url + type_name + arrow + class_prefix + url + type_name +\
        "\">\n" + subclass_prefix + url + superclass + suffix + class_suffix;
        fprintf(f3, "%s", tmp.c_str());
        for(int j = 0; j < sub_num; ++j)
        {
            printf("j = : %d\n", j);
            fscanf(f1, "%s %s", code1, class_2);
            tmp = url_prefix + url + class_2 + arrow + class_prefix + url + class_2 +\
            "\">\n" + subclass_prefix + url + type_name + suffix + class_suffix;
            fprintf(f3, "%s", tmp.c_str());
            min_code = code1; // need to do
            max_code = code1;
            min_code = min_code.substr(0,3);
            max_code = max_code.substr(4);
            
            while (true && !feof(f2)) {
                fscanf(f2, "%s %s", code2, class_3);
                if(strcmp(code2, "@") == 0 && strcmp(class_3, "@") == 0)
                    break;
                subcode = code2;
                subcode = subcode.substr(0, 3);
                if (subcode < min_code || subcode > max_code)
                {
                    printf("code error :%s , min: %s, max : %s\n", code2, min_code.c_str(), max_code.c_str());
                }
                tmp = url_prefix + url + class_3 + arrow + object_prefix + url + class_3 +\
                "\">\n" + object_prefix1 + url + class_2 + suffix + object_suffix;
                fprintf(f3, "%s", tmp.c_str());
            }
        }
    }
    
    //导入药物数据
    char code[10], chname[200];
    map<string, string> atcCode;
    set<string> nameSet;
    string name;
    while (fscanf(f4, "%s %s", code, chname) == 2)
    {
        name = chname;
        if(nameSet.count(name) > 0)
            continue;
        else
            nameSet.insert(name);
        atcCode.emplace(code, chname);
    }
    map<string, string>::iterator it;
    string fa;
    for(it = atcCode.begin(); it != atcCode.end(); ++it)
    {
        fa = get_fa(it->first, atcCode);
        if (fa == "error") {
            cout << "error : " << it->first << endl;
        }
        if(it->first.length() == 7)
        {
            tmp = url_prefix + url + it->second + arrow + object_prefix + url + it->second +\
            "\">\n" + object_prefix1 + url + fa + suffix + object_suffix;
//            fprintf(f3, "%s", tmp.c_str());
        }
        else
        {
            tmp = url_prefix + url + it->second + arrow + class_prefix + url + it->second +\
            "\">\n" + subclass_prefix + url + fa + suffix + class_suffix;
        }
        
        fprintf(f3, "%s", tmp.c_str());
    }
    
    fprintf(f3, "%s", file_suffix.c_str());
    printf("ok ! \n");
    return 0;
}

